// <auto-generated />
using System;
using IG.API.SUNAT.FE.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IG.API.SUNAT.FE.Persistence.Migrations
{
    [DbContext(typeof(IGAPIFEAppDbContext))]
    [Migration("20240319232548_Version03")]
    partial class Version03
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.APIEndPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiURL")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BodyRequest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodApiEndPoint")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CodApiEndPoint")
                        .IsUnique();

                    b.ToTable("APIEndPoint");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApiURL = "https://api-sire.sunat.gob.pe/v1/contribuyente/migeigv/libros/rce/propuesta/web/propuesta/{perTributario}/exportacioncomprobantepropuesta?perTributario={perTributario}&codTipoArchivo={codTipoArchivo}&codOrigenEnvio={codOrigenEnvio}",
                            BodyRequest = "",
                            CodApiEndPoint = "SUNAT_SIRE_RCE_PROPUESTA",
                            ContentType = "application/json; charset=UTF-8",
                            Descripcion = "5.34 Servicio Web Api descargar propuesta",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 389, DateTimeKind.Local).AddTicks(1091),
                            Method = "GET"
                        },
                        new
                        {
                            Id = 2,
                            ApiURL = "https://api-sire.sunat.gob.pe/v1/contribuyente/migeigv/libros/rvie/propuesta/web/propuesta/{perTributario}/exportapropuesta?perTributario={perTributario}&codTipoArchivo={codTipoArchivo}",
                            BodyRequest = "",
                            CodApiEndPoint = "SUNAT_SIRE_RVIE_PROPUESTA",
                            ContentType = "application/json; charset=UTF-8",
                            Descripcion = "5.18 Servicio Web Api descargar propuesta   codTipoArchivo:   0=txt  1=csv",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 389, DateTimeKind.Local).AddTicks(1091),
                            Method = "GET"
                        },
                        new
                        {
                            Id = 3,
                            ApiURL = "https://api-sire.sunat.gob.pe/v1/contribuyente/migeigv/libros/rvierce/gestionprocesosmasivos/web/masivo/consultaestadotickets?perIni={perIni}&perFin={perFin}&page={page}&perPage={perPage}&numTicket={numTicket}",
                            BodyRequest = "",
                            CodApiEndPoint = "SUNAT_SIRE_RVIE_RCE_CONSULTAR_TICKET",
                            ContentType = "application/json; charset=UTF-8",
                            Descripcion = "RVIE:5.16 Servicio Web Api consultar estado de envío de ticket RCE:5.34 Servicio Web Api descargar propuesta",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 389, DateTimeKind.Local).AddTicks(1091),
                            Method = "GET"
                        },
                        new
                        {
                            Id = 4,
                            ApiURL = "https://api-sire.sunat.gob.pe/v1/contribuyente/migeigv/libros/rvierce/gestionprocesosmasivos/web/masivo/archivoreporte?nomArchivoReporte={nomArchivoReporte}&codTipoArchivoReporte=NULL&codLibro=140000",
                            BodyRequest = "",
                            CodApiEndPoint = "SUNAT_SIRE_RVIE_RCE_DESCARGAR_ARCHIVO",
                            ContentType = "application/json; charset=UTF-8",
                            Descripcion = "RVIE:5.17 Servicio Web Api descargar archivo RCE:5.32 Servicio Web Api descargar archivo",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 389, DateTimeKind.Local).AddTicks(1091),
                            Method = "GET"
                        },
                        new
                        {
                            Id = 5,
                            ApiURL = "https://api-seguridad.sunat.gob.pe/v1/clientessol/{client_id}/oauth2/token/",
                            BodyRequest = "grant_type=password&scope={scope}&client_id={client_id}&client_secret={client_secret}&username={username}&password={password}",
                            CodApiEndPoint = "SUNAT_SIRE_SEGURIDAD",
                            ContentType = "application/x-www-form-urlencoded; charset=UTF-8",
                            Descripcion = "3. Generación de token para el uso de servicios REST",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 389, DateTimeKind.Local).AddTicks(1091),
                            Method = "POST"
                        });
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.ApiResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiEndPointId")
                        .HasColumnType("int");

                    b.Property<string>("ApiUrlSend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmpresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("FileContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Identificador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JsonResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenssageError")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiEndPointId");

                    b.HasIndex("EmpresaId");

                    b.ToTable("ApiResponse");
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.OauthAccessToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("access_token")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("date_expires_in")
                        .HasColumnType("datetime");

                    b.Property<int>("expires_in")
                        .HasColumnType("int");

                    b.Property<string>("ruc")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("token_type")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("OauthAccessToken");
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.SUNATFEXMLEspacioNombreTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Efact")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("NubeFact")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SUNAT")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.ToTable("SUNATFEXMLEspacioNombreTag");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = "nodoDescription",
                            Efact = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:Description",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:Description",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:Description"
                        },
                        new
                        {
                            Id = 2,
                            Codigo = "nodoResponseCode",
                            Efact = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ResponseCode",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ResponseCode",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ResponseCode"
                        },
                        new
                        {
                            Id = 3,
                            Codigo = "nodoId ",
                            Efact = "/ar:ApplicationResponse/cbc:ID",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/ar:ApplicationResponse/cbc:ID",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cbc:ID"
                        },
                        new
                        {
                            Id = 4,
                            Codigo = "nodoNote",
                            Efact = "/ar:ApplicationResponse/cbc:Note",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/ar:ApplicationResponse/cbc:Note",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cbc:Note"
                        },
                        new
                        {
                            Id = 5,
                            Codigo = "nodoResponseDate ",
                            Efact = "/ar:ApplicationResponse/cbc:ResponseDate",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/ar:ApplicationResponse/cbc:ResponseDate",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cbc:ResponseDate"
                        },
                        new
                        {
                            Id = 6,
                            Codigo = "EnvResBase64",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:sendBillResponse/applicationResponse",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/br:sendBillResponse/applicationResponse",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:sendBillResponse/applicationResponse"
                        },
                        new
                        {
                            Id = 7,
                            Codigo = "EnvResSummaryTicket",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:sendSummaryResponse/ticket",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/br:sendSummaryResponse/ticket",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:sendSummaryResponse/ticket"
                        },
                        new
                        {
                            Id = 8,
                            Codigo = "envResCode",
                            Efact = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultstring",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultcode",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultcode"
                        },
                        new
                        {
                            Id = 9,
                            Codigo = "EnvResString",
                            Efact = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultstring",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultstring",
                            NubeFact = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/detail",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/faultstring"
                        },
                        new
                        {
                            Id = 10,
                            Codigo = "nodoResponseTime ",
                            Efact = "ar:ApplicationResponse/cbc:ResponseTime",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "ar:ApplicationResponse/cbc:ResponseTime",
                            NubeFact = "NULL",
                            SUNAT = "ar:ApplicationResponse/cbc:ResponseTime"
                        },
                        new
                        {
                            Id = 11,
                            Codigo = "wsse",
                            Efact = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xs",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xs",
                            NubeFact = "NULL",
                            SUNAT = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xs"
                        },
                        new
                        {
                            Id = 12,
                            Codigo = "wssecurity",
                            Efact = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd",
                            NubeFact = "NULL",
                            SUNAT = "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd"
                        },
                        new
                        {
                            Id = 13,
                            Codigo = "soap-env",
                            Efact = "http://schemas.xmlsoap.org/soap/envelope/",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://schemas.xmlsoap.org/soap/envelope/",
                            NubeFact = "NULL",
                            SUNAT = "http://schemas.xmlsoap.org/soap/envelope/"
                        },
                        new
                        {
                            Id = 14,
                            Codigo = "br",
                            Efact = "http://service.sunat.gob.pe",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://service.sunat.gob.pe",
                            NubeFact = "NULL",
                            SUNAT = "http://service.sunat.gob.pe"
                        },
                        new
                        {
                            Id = 15,
                            Codigo = "ds ",
                            Efact = "http://www.w3.org/2000/09/xmldsig#",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://www.w3.org/2000/09/xmldsig#",
                            NubeFact = "NULL",
                            SUNAT = "http://www.w3.org/2000/09/xmldsig#"
                        },
                        new
                        {
                            Id = 16,
                            Codigo = "xsi ",
                            Efact = "http://www.w3.org/2001/XMLSchema-instance",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "http://www.w3.org/2001/XMLSchema-instance",
                            NubeFact = "NULL",
                            SUNAT = "http://www.w3.org/2001/XMLSchema-instance"
                        },
                        new
                        {
                            Id = 17,
                            Codigo = "ar ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:ApplicationResponse-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:ApplicationResponse-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:ApplicationResponse-2"
                        },
                        new
                        {
                            Id = 18,
                            Codigo = "cac ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"
                        },
                        new
                        {
                            Id = 19,
                            Codigo = "cbc ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"
                        },
                        new
                        {
                            Id = 20,
                            Codigo = "ext ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:CommonExtensionComponents-2"
                        },
                        new
                        {
                            Id = 21,
                            Codigo = "xmlnsCreditNote ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2"
                        },
                        new
                        {
                            Id = 22,
                            Codigo = "xmlnsDebitNote ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:DebitNote-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:DebitNote-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:DebitNote-2"
                        },
                        new
                        {
                            Id = 23,
                            Codigo = "xmlnsDespatchAdvice ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:DespatchAdvice-2"
                        },
                        new
                        {
                            Id = 24,
                            Codigo = "xmlnsInvoice",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
                        },
                        new
                        {
                            Id = 25,
                            Codigo = "qdt ",
                            Efact = "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2",
                            NubeFact = "NULL",
                            SUNAT = "urn:oasis:names:specification:ubl:schema:xsd:QualifiedDatatypes-2"
                        },
                        new
                        {
                            Id = 26,
                            Codigo = "xmlnsPerception ",
                            Efact = "urn:sunat:names:specification:ubl:peru:schema:xsd:Perception-1",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:sunat:names:specification:ubl:peru:schema:xsd:Perception-1",
                            NubeFact = "NULL",
                            SUNAT = "urn:sunat:names:specification:ubl:peru:schema:xsd:Perception-1"
                        },
                        new
                        {
                            Id = 27,
                            Codigo = "xmlnsRetention ",
                            Efact = "urn:sunat:names:specification:ubl:peru:schema:xsd:Retention-1",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:sunat:names:specification:ubl:peru:schema:xsd:Retention-1",
                            NubeFact = "NULL",
                            SUNAT = "urn:sunat:names:specification:ubl:peru:schema:xsd:Retention-1"
                        },
                        new
                        {
                            Id = 28,
                            Codigo = "xmlnsSummaryDocuments ",
                            Efact = "urn:sunat:names:specification:ubl:peru:schema:xsd:SummaryDocuments-1",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:sunat:names:specification:ubl:peru:schema:xsd:SummaryDocuments-1",
                            NubeFact = "NULL",
                            SUNAT = "urn:sunat:names:specification:ubl:peru:schema:xsd:SummaryDocuments-1"
                        },
                        new
                        {
                            Id = 29,
                            Codigo = "sac ",
                            Efact = "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1",
                            NubeFact = "NULL",
                            SUNAT = "urn:sunat:names:specification:ubl:peru:schema:xsd:SunatAggregateComponents-1"
                        },
                        new
                        {
                            Id = 30,
                            Codigo = "xmlnsVoidedDocuments ",
                            Efact = "urn:sunat:names:specification:ubl:peru:schema:xsd:VoidedDocuments-1",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:sunat:names:specification:ubl:peru:schema:xsd:VoidedDocuments-1",
                            NubeFact = "NULL",
                            SUNAT = "urn:sunat:names:specification:ubl:peru:schema:xsd:VoidedDocuments-1"
                        },
                        new
                        {
                            Id = 31,
                            Codigo = "udt ",
                            Efact = "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2",
                            NubeFact = "NULL",
                            SUNAT = "urn:un:unece:uncefact:data:specification:UnqualifiedDataTypesSchemaModule:2"
                        },
                        new
                        {
                            Id = 32,
                            Codigo = "ccts ",
                            Efact = "urn:un:unece:uncefact:documentation:2",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "urn:un:unece:uncefact:documentation:2",
                            NubeFact = "NULL",
                            SUNAT = "urn:un:unece:uncefact:documentation:2"
                        },
                        new
                        {
                            Id = 33,
                            Codigo = "getStatusBase64",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/content",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/content",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/content"
                        },
                        new
                        {
                            Id = 34,
                            Codigo = "getStatusCode",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/statusCode/statusCode",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/statusCode",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:getStatusResponse/status/statusCode"
                        },
                        new
                        {
                            Id = 35,
                            Codigo = "nodoReferenceID",
                            Efact = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ReferenceID",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "NULL",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cac:DocumentResponse/cac:Response/cbc:ReferenceID"
                        },
                        new
                        {
                            Id = 36,
                            Codigo = "getStatusCdrBase64",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/document",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/document",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/statusCdr/content"
                        },
                        new
                        {
                            Id = 37,
                            Codigo = "EnvResDetail",
                            Efact = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/detail/detail",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/detail/detail",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/soap-env:Fault/detail/detail"
                        },
                        new
                        {
                            Id = 38,
                            Codigo = "nodoDocDscrURL",
                            Efact = "/ar:ApplicationResponse/cac:DocumentResponse/cac:DocumentReference/cbc:DocumentDescription",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "NULL",
                            NubeFact = "NULL",
                            SUNAT = "/ar:ApplicationResponse/cac:DocumentResponse/cac:DocumentReference/cbc:DocumentDescription"
                        },
                        new
                        {
                            Id = 39,
                            Codigo = "getstatusCdrCode",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/statusCdr/statusCode",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "NULL",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/statusCdr/statusCode"
                        },
                        new
                        {
                            Id = 40,
                            Codigo = "getstatusCdrMessage",
                            Efact = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/statusCdr/statusMessage",
                            FechaCreacion = new DateTime(2024, 3, 19, 20, 25, 48, 405, DateTimeKind.Local).AddTicks(2298),
                            Nombre = "NULL",
                            NubeFact = "NULL",
                            SUNAT = "/soap-env:Envelope/soap-env:Body/br:getStatusCdrResponse/statusCdr/statusMessage"
                        });
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.SUNAT_FE_Comprobante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<string>("IdComprobante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mensaje")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ticket")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("URLDocumento")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("XmlCdr")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("bProcesado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("dtFechaHoraProceso")
                        .HasColumnType("datetime");

                    b.Property<string>("nomArchivo")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("xmlFirmado")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SUNAT_FE_Comprobante");
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.maeEmpresa", b =>
                {
                    b.Property<int>("IdmaeEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdmaeEmpresa"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaCreacion");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("FechaModificacion");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("NommaeEmpresa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("bProduccion")
                        .HasColumnType("bit");

                    b.Property<string>("ntCertificadoPfx")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ntSoapFE")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nvCertificadoPass")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("nvClaveFE")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nvClientIdApiFE")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvClientSecretApiFE")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvCodTipoDocumentoIdentidad")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("nvEncoding")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("nvNumDocumentoIdentidad")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("nvProveedorFE")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("nvScopeApiFE")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("nvURLConsultaApiFE")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvURLEnvioApiFE")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvURLFE")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvURLTokenApiFE")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("nvUsuarioFE")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("IdmaeEmpresa");

                    b.HasIndex("nvNumDocumentoIdentidad", "bProduccion")
                        .IsUnique()
                        .HasFilter("[nvNumDocumentoIdentidad] IS NOT NULL AND [bProduccion] IS NOT NULL");

                    b.ToTable("maeEmpresa");
                });

            modelBuilder.Entity("IG.API.SUNAT.FE.Entity.ApiResponse", b =>
                {
                    b.HasOne("IG.API.SUNAT.FE.Entity.APIEndPoint", "ApiEndPoint")
                        .WithMany()
                        .HasForeignKey("ApiEndPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IG.API.SUNAT.FE.Entity.maeEmpresa", "Empresa")
                        .WithMany()
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiEndPoint");

                    b.Navigation("Empresa");
                });
#pragma warning restore 612, 618
        }
    }
}
