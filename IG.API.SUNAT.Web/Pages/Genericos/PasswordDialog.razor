@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IApiUtil fn
@if (IsDialogOpen)
{
    <EditForm Model="pass" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <div class="dialog-box">
            <h3>Contraseña</h3>
            <div class="form-group">
                <label>@(nameof(pass.Password))</label>
                <InputText type="password" @bind-Value="pass.Password" class="form-control" />
                <ValidationMessage For="@(() => pass.Password)" />
            </div>
            <div class="form-group">
                <label>@(nameof(pass.RepeatPassword))</label>
                <InputText type="password" @bind-Value="pass.RepeatPassword" class="form-control" />
                <ValidationMessage For="@(() => pass.RepeatPassword)" />
            </div>
            @if (!string.IsNullOrEmpty(Mensaje))
            {
                <div class="alert alert-danger mt-3">
                    <p>@Mensaje</p>
                </div>

            }
            <div class="dialog-buttons">
                <button type="submit" class="btn btn-outline-success">Aceptar</button>
                <button @onclick="CloseDialog" class="btn btn-outline-danger">Cancelar</button>
            </div>

        </div>
    </EditForm>
}
<style>
    /* wwwroot/css/site.css */

    .dialog-box {
        border: 1px solid black;
        padding: 20px;
        background-color: white;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .dialog-buttons {
        margin-top: 10px;
    }

        .dialog-buttons button {
            margin-right: 5px;
        }

</style>
@code {
    [Parameter] public EventCallback<string> OnPasswordSet { get; set; }
    private bool IsDialogOpen { get; set; }

    private string Mensaje { get; set; } = string.Empty;
    public PassModel pass { get; set; } = new PassModel();

    public void OpenDialog()
    {
        IsDialogOpen = true;
    }

    private void CloseDialog()
    {
        IsDialogOpen = false;
    }

    private async Task Submit()
    {

        if (pass.Password == pass.RepeatPassword)
        {
            pass.Password = await fn.CifrarSha512(pass.Password);
            await OnPasswordSet.InvokeAsync(pass.Password);
            CloseDialog();
        }
        else
        {
            // Mostrar un mensaje de error o manejar el error adecuadamente
            Mensaje = $"Las contraseñas no coinciden.";
        }
    }

    public class PassModel
    {
        [Display(Name = "Contraseña")]
        [Required(ErrorMessage = "El {0} es obligatorio")]
        [MinLength(5, ErrorMessage = "La {0} debe tener al menos {1} caracteres")]
        public string Password { get; set; }
        [Display(Name = "Repetir Contraseña")]
        [MinLength(5, ErrorMessage = "La {0} debe tener al menos {1} caracteres")]
        [Required(ErrorMessage = "El {0} es obligatorio")]
        public string RepeatPassword { get; set; }
    }
}
